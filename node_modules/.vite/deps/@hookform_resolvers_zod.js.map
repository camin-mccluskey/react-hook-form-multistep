{
  "version": 3,
  "sources": ["../../@hookform/resolvers/src/validateFieldsNatively.ts", "../../@hookform/resolvers/src/toNestError.ts", "../../@hookform/resolvers/zod/src/zod.ts"],
  "sourcesContent": ["import {\n  get,\n  FieldError,\n  ResolverOptions,\n  Ref,\n  FieldErrors,\n  FieldValues,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n", "import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n  FieldValues,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path] || {}, { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n", "import { appendErrors, FieldError, FieldErrors } from 'react-hook-form';\nimport { z, ZodError } from 'zod';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport type { Resolver } from './types';\n\nconst isZodError = (error: any): error is ZodError => error.errors != null;\n\nconst parseErrorSchema = (\n  zodErrors: z.ZodIssue[],\n  validateAllFieldCriteria: boolean,\n) => {\n  const errors: Record<string, FieldError> = {};\n  for (; zodErrors.length; ) {\n    const error = zodErrors[0];\n    const { code, message, path } = error;\n    const _path = path.join('.');\n\n    if (!errors[_path]) {\n      if ('unionErrors' in error) {\n        const unionError = error.unionErrors[0].errors[0];\n\n        errors[_path] = {\n          message: unionError.message,\n          type: unionError.code,\n        };\n      } else {\n        errors[_path] = { message, type: code };\n      }\n    }\n\n    if ('unionErrors' in error) {\n      error.unionErrors.forEach((unionError) =>\n        unionError.errors.forEach((e) => zodErrors.push(e)),\n      );\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.code];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        code,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    zodErrors.shift();\n  }\n\n  return errors;\n};\n\nexport const zodResolver: Resolver =\n  (schema, schemaOptions, resolverOptions = {}) =>\n  async (values, _, options) => {\n    try {\n      const data = await schema[\n        resolverOptions.mode === 'sync' ? 'parse' : 'parseAsync'\n      ](values, schemaOptions);\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        errors: {} as FieldErrors,\n        values: resolverOptions.raw ? values : data,\n      };\n    } catch (error: any) {\n      if (isZodError(error)) {\n        return {\n          values: {},\n          errors: toNestError(\n            parseErrorSchema(\n              error.errors,\n              !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n            ),\n            options,\n          ),\n        };\n      }\n\n      throw error;\n    }\n  };\n"],
  "mappings": "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",
  "names": ["setCustomValidity", "ref", "fieldPath", "errors", "error", "get", "message", "reportValidity", "validateFieldsNatively", "options", "_loop", "field", "fields", "refs", "forEach", "toNestError", "shouldUseNativeValidation", "fieldErrors", "path", "set", "Object", "assign", "parseErrorSchema", "zodErrors", "validateAllFieldCriteria", "errors", "length", "error", "code", "message", "_path", "path", "join", "unionError", "unionErrors", "type", "forEach", "e", "push", "types", "messages", "appendErrors", "concat", "shift", "zodResolver", "schema", "schemaOptions", "resolverOptions", "values", "_", "options", "Promise", "resolve", "mode", "then", "data", "shouldUseNativeValidation", "validateFieldsNatively", "raw", "r", "n", "a", "toNestError", "criteriaMode", "reject"]
}
